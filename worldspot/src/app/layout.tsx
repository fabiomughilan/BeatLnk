import { auth } from '@/auth';
import ClientProviders from '@/providers';
import HydrationFix from '@/components/HydrationFix';
import '@worldcoin/mini-apps-ui-kit-react/styles.css';
import type { Metadata } from 'next';
import { Geist, Geist_Mono } from 'next/font/google';
import './globals.css';

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
});

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
});

export const metadata: Metadata = {
  title: 'Template Mini App',
  description: 'Generated by create next app',
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const session = await auth();
  return (
    <html lang="en">
      <head>
        <script
          dangerouslySetInnerHTML={{
            __html: `
              // Fix hydration mismatch caused by browser extensions
              (function() {
                if (typeof window !== 'undefined') {
                  const fixExtensionAttributes = () => {
                    const body = document.body;
                    if (body) {
                      const extensionAttributes = [
                        'data-channel-name',
                        'data-extension-id', 
                        'data-new-gr-c-s-check-loaded',
                        'data-gr-ext-installed'
                      ];
                      
                      extensionAttributes.forEach(attr => {
                        if (body.hasAttribute(attr)) {
                          body.removeAttribute(attr);
                        }
                      });
                    }
                  };
                  
                  // Run immediately
                  fixExtensionAttributes();
                  
                  // Run after DOM is ready
                  if (document.readyState === 'loading') {
                    document.addEventListener('DOMContentLoaded', fixExtensionAttributes);
                  }
                }
              })();
            `,
          }}
        />
      </head>
      <body 
        className={`${geistSans.variable} ${geistMono.variable} `}
        suppressHydrationWarning={true}
      >
        <HydrationFix />
        <ClientProviders session={session}>{children}</ClientProviders>
      </body>
    </html>
  );
}
